package main

import (
	"net/http"

	"github.com/prometheus/client_golang/prometheus/promhttp"
)

// 이 예제는 실행 중인 애플리케이션에 대한 통계를 prometheus go 클라이언트를 사용해 프로메테우스로 내보내는 간단한 핻들러를 Go로 작성한다.
// 도커에서 실행되는 프로메테우스 서버에 애플리케이션을 연결하고 docker-compose를 사용해 네트워크 연결과 시작을 위한 작업을 처리한다.
// 데이터 수집 빈도, 애플리케이션에서 제공할 포트, 앱의 이름에 대한 설정은 모두 prometheus.yml 파일에 지정돼 있다. 두 컨테이너가 시작되면,
// 프로메테우스 서버는 지정된 포트에서 앱에 대한 정보를 수집하고 모니터링을 시작한다. 또한 앱에 대한 정보를 자세히 확인할 수 있도록 브라우저에서
// 방문 가능한 웹 인터페이스도 제공한다.
//
// 프로메테우스 클라이언트 핸들러는 프로메테우스 서버에 애플리케이션에 대한 다양한 통계를 반환한다. 이를 통해 앱을 재구성하거나 재배포하지 않고도
// 앱에서 여퍼 프로메테우스 서버를 가리킬 수 있다. 이 통계 정보의 대부분은 포괄적이며 메모리 누수 감지 등에 유용하다. 다른 많은 솔루션에서는
// 서버에 주기적으로 정보를 보내야 한다. 다음 예지인 지표 수집에서는 사용자 정의 정보를 프로메테우스 서버로 전달하는 방법을 보여준다.
func main() {
	http.Handle("/metrics", promhttp.Handler())
	panic(http.ListenAndServe(":80", nil))
}
