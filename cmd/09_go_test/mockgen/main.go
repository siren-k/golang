package mockgen

// mockgen -destination internal/mocks.go -package internal golang/internal/09_go_test/mockgen GetSetter

// 생성된 모의 객체를 사용하면 테스트에서 예상하는 매개변수, 함수의 호출 횟수 및 반환 대상을 지정할 수 있다. 또한 생성된 모의 객체를
// 사용하면 원하는 테스트 상황을 추가할 수 있다. 예를 들어, 원래의 함수에 비슥한 워크플로(workflow)가 있다면 채널에 직접 작설할
// 수도 있다. interface_test.go 파일은 모의 객체를 사용해 호출하는 몇 가지 예를 보여준다. 일반적으로 테스트는 실제 코드에서
// 수행되는 인터페이스 함수 호출을 가로채 테스트 시점에 이 함수의 동작을 변경하는 exec_test.go와 더 비슷하다.
//
// exec_test.go 파일은 테이블 기반 테스트 환경에서 모의 객체를 사용하는 방법에 대한 예도 보여준다. Any(0 함수는 모의 함수를
// 합 번도 호출하지 않거나 그 이상 호출할 수 있다는 것을 보여주므로 코드가 조기에 종료되는 경우에 좋은 방법이다.
//
// 이 예제에서 마지막으로 보여준 기법은 모의 객체를 내부 패키지에 연결한 것이다. 이 기법은 직접 작성하지 않고 외부체 선언된 함수를
// 테스트해아 할 때 유용하다. 이 기법을 활용하면 _test.go 파일에 외부에 선언된 함수들이 정의되지만, 내부 패키지에서 임포트 할 수
// 없기 때문에 여러분의 라이브러리를 사용하는 사용자에게는 보이지 않는다. 일반적으로 현재 작성 중인 테스트와 통일한 패키지 이름을
// 사용해 _test.go 파일에 모의 객체를 연결하는 것이 더 쉽다.
func main() {

}
