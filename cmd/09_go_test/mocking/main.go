package main

// 이 예제는 인터페이스뿐만 아니라 변수로 선언된 함수를 모의 객체를 활용해 테스트하는 방법을 보여준다.
// 또한 선언된 함수에서 패치(patch)/복구(restore)를 직접 모방할 수 있는 특정 라이브러리도 존재하지만
// 이들을 사용하려면 Go 타입 안정성을 우회해야 한다. 외부 패키지에서 함수를 패치하야 할 때는 다음과 같은
// 기법을 사용할 수 있다.
//
// // 패치를 원하는 패키지 import
// import "github.com/package"
//
// // 이 예제에서 설명한 메소드(함수)를 사용해 패치가 가능함
// var packageDoSomething = package.DoSomething
//
// 이 예제에서는 테스트를 설정하고 테이블 기반 테스트를 사용하는 것으로 시작했다.
// https://github.com/golang/go/wiki/TableDrivenTests 와 같이 이 기법에 대한 여러 내용이
// 있으니 더 자세히 살펴볼 것을 권장한다. 테스트 설정이 완료되면, 모의 함수에 대한 출력을 선택한다. 모의 객체는
// 인터페이스를 테스트하기 위해 런타임에 다시 작성할 수 있는 클로저를 정의한다. 전역 함수를 변경하고 필요한 테스트가
// 끝난 후 다시 복구하기 위해 패치/복구 기법을 적용한다. 이 동작은 테스트의 각 루프에 대해 새 함수를 설정할 수 있는
// t.Run 덕분에 가능하다.
func main() {

}
